<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.winteree.uaa.dao.LogDOMapper">
  <resultMap id="BaseResultMap" type="com.winteree.uaa.dao.entity.LogDO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="uuid" jdbcType="VARCHAR" property="uuid" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="log_type" jdbcType="VARCHAR" property="logType" />
    <result column="log_sub_type" jdbcType="VARCHAR" property="logSubType" />
    <result column="tenant_uuid" jdbcType="VARCHAR" property="tenantUuid" />
    <result column="account_uuid" jdbcType="VARCHAR" property="accountUuid" />
    <result column="client_uuid" jdbcType="VARCHAR" property="clientUuid" />
    <result column="client_ip" jdbcType="VARCHAR" property="clientIp" />
    <result column="request_method" jdbcType="VARCHAR" property="requestMethod" />
    <result column="status_code" jdbcType="VARCHAR" property="statusCode" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.winteree.uaa.dao.entity.LogDOWithBLOBs">
    <result column="logValue" jdbcType="LONGVARCHAR" property="logvalue" />
    <result column="request_url" jdbcType="LONGVARCHAR" property="requestUrl" />
    <result column="request_head" jdbcType="LONGVARCHAR" property="requestHead" />
    <result column="request_body" jdbcType="LONGVARCHAR" property="requestBody" />
    <result column="response_head" jdbcType="LONGVARCHAR" property="responseHead" />
    <result column="response_body" jdbcType="LONGVARCHAR" property="responseBody" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, uuid, create_time, log_type, log_sub_type, tenant_uuid, account_uuid, client_uuid, 
    client_ip, request_method, status_code, update_time
  </sql>
  <sql id="Blob_Column_List">
    logValue, request_url, request_head, request_body, response_head, response_body
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.winteree.uaa.dao.entity.LogDOExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from winteree.winteree_core_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.winteree.uaa.dao.entity.LogDOExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from winteree.winteree_core_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from winteree.winteree_core_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from winteree.winteree_core_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.winteree.uaa.dao.entity.LogDOExample">
    delete from winteree.winteree_core_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.winteree.uaa.dao.entity.LogDOWithBLOBs">
    insert into winteree.winteree_core_log (id, uuid, create_time, 
      log_type, log_sub_type, tenant_uuid, 
      account_uuid, client_uuid, client_ip, 
      request_method, status_code, update_time, 
      logValue, request_url, request_head, 
      request_body, response_head, response_body
      )
    values (#{id,jdbcType=BIGINT}, #{uuid,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{logType,jdbcType=VARCHAR}, #{logSubType,jdbcType=VARCHAR}, #{tenantUuid,jdbcType=VARCHAR}, 
      #{accountUuid,jdbcType=VARCHAR}, #{clientUuid,jdbcType=VARCHAR}, #{clientIp,jdbcType=VARCHAR}, 
      #{requestMethod,jdbcType=VARCHAR}, #{statusCode,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{logvalue,jdbcType=LONGVARCHAR}, #{requestUrl,jdbcType=LONGVARCHAR}, #{requestHead,jdbcType=LONGVARCHAR}, 
      #{requestBody,jdbcType=LONGVARCHAR}, #{responseHead,jdbcType=LONGVARCHAR}, #{responseBody,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.winteree.uaa.dao.entity.LogDOWithBLOBs">
    insert into winteree.winteree_core_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="uuid != null">
        uuid,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="logType != null">
        log_type,
      </if>
      <if test="logSubType != null">
        log_sub_type,
      </if>
      <if test="tenantUuid != null">
        tenant_uuid,
      </if>
      <if test="accountUuid != null">
        account_uuid,
      </if>
      <if test="clientUuid != null">
        client_uuid,
      </if>
      <if test="clientIp != null">
        client_ip,
      </if>
      <if test="requestMethod != null">
        request_method,
      </if>
      <if test="statusCode != null">
        status_code,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="logvalue != null">
        logValue,
      </if>
      <if test="requestUrl != null">
        request_url,
      </if>
      <if test="requestHead != null">
        request_head,
      </if>
      <if test="requestBody != null">
        request_body,
      </if>
      <if test="responseHead != null">
        response_head,
      </if>
      <if test="responseBody != null">
        response_body,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="uuid != null">
        #{uuid,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="logType != null">
        #{logType,jdbcType=VARCHAR},
      </if>
      <if test="logSubType != null">
        #{logSubType,jdbcType=VARCHAR},
      </if>
      <if test="tenantUuid != null">
        #{tenantUuid,jdbcType=VARCHAR},
      </if>
      <if test="accountUuid != null">
        #{accountUuid,jdbcType=VARCHAR},
      </if>
      <if test="clientUuid != null">
        #{clientUuid,jdbcType=VARCHAR},
      </if>
      <if test="clientIp != null">
        #{clientIp,jdbcType=VARCHAR},
      </if>
      <if test="requestMethod != null">
        #{requestMethod,jdbcType=VARCHAR},
      </if>
      <if test="statusCode != null">
        #{statusCode,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="logvalue != null">
        #{logvalue,jdbcType=LONGVARCHAR},
      </if>
      <if test="requestUrl != null">
        #{requestUrl,jdbcType=LONGVARCHAR},
      </if>
      <if test="requestHead != null">
        #{requestHead,jdbcType=LONGVARCHAR},
      </if>
      <if test="requestBody != null">
        #{requestBody,jdbcType=LONGVARCHAR},
      </if>
      <if test="responseHead != null">
        #{responseHead,jdbcType=LONGVARCHAR},
      </if>
      <if test="responseBody != null">
        #{responseBody,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.winteree.uaa.dao.entity.LogDOExample" resultType="java.lang.Long">
    select count(*) from winteree.winteree_core_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update winteree.winteree_core_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.uuid != null">
        uuid = #{record.uuid,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.logType != null">
        log_type = #{record.logType,jdbcType=VARCHAR},
      </if>
      <if test="record.logSubType != null">
        log_sub_type = #{record.logSubType,jdbcType=VARCHAR},
      </if>
      <if test="record.tenantUuid != null">
        tenant_uuid = #{record.tenantUuid,jdbcType=VARCHAR},
      </if>
      <if test="record.accountUuid != null">
        account_uuid = #{record.accountUuid,jdbcType=VARCHAR},
      </if>
      <if test="record.clientUuid != null">
        client_uuid = #{record.clientUuid,jdbcType=VARCHAR},
      </if>
      <if test="record.clientIp != null">
        client_ip = #{record.clientIp,jdbcType=VARCHAR},
      </if>
      <if test="record.requestMethod != null">
        request_method = #{record.requestMethod,jdbcType=VARCHAR},
      </if>
      <if test="record.statusCode != null">
        status_code = #{record.statusCode,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.logvalue != null">
        logValue = #{record.logvalue,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.requestUrl != null">
        request_url = #{record.requestUrl,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.requestHead != null">
        request_head = #{record.requestHead,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.requestBody != null">
        request_body = #{record.requestBody,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.responseHead != null">
        response_head = #{record.responseHead,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.responseBody != null">
        response_body = #{record.responseBody,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update winteree.winteree_core_log
    set id = #{record.id,jdbcType=BIGINT},
      uuid = #{record.uuid,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      log_type = #{record.logType,jdbcType=VARCHAR},
      log_sub_type = #{record.logSubType,jdbcType=VARCHAR},
      tenant_uuid = #{record.tenantUuid,jdbcType=VARCHAR},
      account_uuid = #{record.accountUuid,jdbcType=VARCHAR},
      client_uuid = #{record.clientUuid,jdbcType=VARCHAR},
      client_ip = #{record.clientIp,jdbcType=VARCHAR},
      request_method = #{record.requestMethod,jdbcType=VARCHAR},
      status_code = #{record.statusCode,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      logValue = #{record.logvalue,jdbcType=LONGVARCHAR},
      request_url = #{record.requestUrl,jdbcType=LONGVARCHAR},
      request_head = #{record.requestHead,jdbcType=LONGVARCHAR},
      request_body = #{record.requestBody,jdbcType=LONGVARCHAR},
      response_head = #{record.responseHead,jdbcType=LONGVARCHAR},
      response_body = #{record.responseBody,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update winteree.winteree_core_log
    set id = #{record.id,jdbcType=BIGINT},
      uuid = #{record.uuid,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      log_type = #{record.logType,jdbcType=VARCHAR},
      log_sub_type = #{record.logSubType,jdbcType=VARCHAR},
      tenant_uuid = #{record.tenantUuid,jdbcType=VARCHAR},
      account_uuid = #{record.accountUuid,jdbcType=VARCHAR},
      client_uuid = #{record.clientUuid,jdbcType=VARCHAR},
      client_ip = #{record.clientIp,jdbcType=VARCHAR},
      request_method = #{record.requestMethod,jdbcType=VARCHAR},
      status_code = #{record.statusCode,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.winteree.uaa.dao.entity.LogDOWithBLOBs">
    update winteree.winteree_core_log
    <set>
      <if test="uuid != null">
        uuid = #{uuid,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="logType != null">
        log_type = #{logType,jdbcType=VARCHAR},
      </if>
      <if test="logSubType != null">
        log_sub_type = #{logSubType,jdbcType=VARCHAR},
      </if>
      <if test="tenantUuid != null">
        tenant_uuid = #{tenantUuid,jdbcType=VARCHAR},
      </if>
      <if test="accountUuid != null">
        account_uuid = #{accountUuid,jdbcType=VARCHAR},
      </if>
      <if test="clientUuid != null">
        client_uuid = #{clientUuid,jdbcType=VARCHAR},
      </if>
      <if test="clientIp != null">
        client_ip = #{clientIp,jdbcType=VARCHAR},
      </if>
      <if test="requestMethod != null">
        request_method = #{requestMethod,jdbcType=VARCHAR},
      </if>
      <if test="statusCode != null">
        status_code = #{statusCode,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="logvalue != null">
        logValue = #{logvalue,jdbcType=LONGVARCHAR},
      </if>
      <if test="requestUrl != null">
        request_url = #{requestUrl,jdbcType=LONGVARCHAR},
      </if>
      <if test="requestHead != null">
        request_head = #{requestHead,jdbcType=LONGVARCHAR},
      </if>
      <if test="requestBody != null">
        request_body = #{requestBody,jdbcType=LONGVARCHAR},
      </if>
      <if test="responseHead != null">
        response_head = #{responseHead,jdbcType=LONGVARCHAR},
      </if>
      <if test="responseBody != null">
        response_body = #{responseBody,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.winteree.uaa.dao.entity.LogDOWithBLOBs">
    update winteree.winteree_core_log
    set uuid = #{uuid,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      log_type = #{logType,jdbcType=VARCHAR},
      log_sub_type = #{logSubType,jdbcType=VARCHAR},
      tenant_uuid = #{tenantUuid,jdbcType=VARCHAR},
      account_uuid = #{accountUuid,jdbcType=VARCHAR},
      client_uuid = #{clientUuid,jdbcType=VARCHAR},
      client_ip = #{clientIp,jdbcType=VARCHAR},
      request_method = #{requestMethod,jdbcType=VARCHAR},
      status_code = #{statusCode,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      logValue = #{logvalue,jdbcType=LONGVARCHAR},
      request_url = #{requestUrl,jdbcType=LONGVARCHAR},
      request_head = #{requestHead,jdbcType=LONGVARCHAR},
      request_body = #{requestBody,jdbcType=LONGVARCHAR},
      response_head = #{responseHead,jdbcType=LONGVARCHAR},
      response_body = #{responseBody,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.winteree.uaa.dao.entity.LogDO">
    update winteree.winteree_core_log
    set uuid = #{uuid,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      log_type = #{logType,jdbcType=VARCHAR},
      log_sub_type = #{logSubType,jdbcType=VARCHAR},
      tenant_uuid = #{tenantUuid,jdbcType=VARCHAR},
      account_uuid = #{accountUuid,jdbcType=VARCHAR},
      client_uuid = #{clientUuid,jdbcType=VARCHAR},
      client_ip = #{clientIp,jdbcType=VARCHAR},
      request_method = #{requestMethod,jdbcType=VARCHAR},
      status_code = #{statusCode,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>