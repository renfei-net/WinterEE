package com.philisense.report.config;import net.renfei.sdk.utils.PasswordUtils;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.oauth2.provider.token.TokenStore;import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;/** * TokenConfig * * @author RenFei */@Configurationpublic class TokenConfig {    private final YourConfig yourConfig;    public TokenConfig(YourConfig yourConfig) {        this.yourConfig = yourConfig;    }    /**     * 令牌存储策略     *     * @return     */    @Bean    public TokenStore tokenStore() {        return new JwtTokenStore(accessTokenConverter());    }    @Bean    public JwtAccessTokenConverter accessTokenConverter() {        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();        converter.setSigningKey(yourConfig.getOauth2().getPrivateKey());        converter.setVerifierKey(yourConfig.getOauth2().getPublicKey());        return converter;    }    /**     * 密码编码器     *     * @return     */    @Bean    public static PasswordEncoder passwordEncoder() {        return new PasswordEncoder() {            @Override            public boolean matches(CharSequence rawPassword, String encodedPassword) {                return PasswordUtils.verifyPassword((String) rawPassword, encodedPassword);            }            @Override            public String encode(CharSequence rawPassword) {                try {                    return PasswordUtils.createHash((String) rawPassword);                } catch (PasswordUtils.CannotPerformOperationException e) {                    e.printStackTrace();                    return null;                }            }        };    }}