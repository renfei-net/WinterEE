application:
  version: 1.0.0-SNAPSHOT
server:
  port: 8090
spring:
  application:
    name: WinterEE-Core-Serve
  cloud:
    config:
      discovery:
        enabled: false
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/winteree?useSSL=false&serverTimezone=GMT%2B8&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
    #Druid 连接池通用配置
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # sql 校验
      validation-query: select 1 from dual
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      max-pool-prepared-statement-per-connection-size: 20
      filters: stat # wall 若开启 wall，会把 if 中的 and 判断为注入进行拦截
      use-global-data-source-stat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
  main:
    allow-bean-definition-overriding: true
  zipkin:
    base-url: http://localhost:9411/
  sleuth:
    sampler:
      rate: 100
  mail:
    host: smtp.163.com
    username: t_e_s_t_e_r@163.com
    password: OHTLBKEQFTJIYXOC
    properties:
      from: t_e_s_t_e_r@163.com
  quartz:
    properties:
      org:
        quartz:
          scheduler:
            instanceName: WinterEEScheduler
            instanceId: AUTO
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: winteree_core_qrtz_
            isClustered: true
            clusterCheckinInterval: 10000
            useProperties: false
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
    #数据库方式
    job-store-type: jdbc
mybatis:
  typeAliasesPackage: com.winteree.core.dao.entity
  mapperLocations: classpath*:mapper/mysql/*.xml
  #  configuration:
  #    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  #pagehelper分页插件配置
pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql
security:
  oauth2:
    client:
      clientId: WinterEE-Core-Serve
      clientSecret: w4nHQGH8oBsj4HMrgcYVyZRFPFbMUuLK
      accessTokenUri: http://localhost:8114/oauth/token
      scope: WinterEE-Core-Serve
    resource:
      user-info-uri: http://localhost:8114/oauth2/userinfo
      token-info-uri: http://localhost:8114/oauth/check_token
feign:
  hystrix:
    enabled: true
winteree:
  core:
    runMode: dev
    smsService: aliyun
    rootAccount: 9369919A-F95E-44CF-AB0A-6BCD1D933403
    enableEmail: true
    enableSMS: true
    enableSwagger: true
    systemname: WinterEE
    totpseed: FycVPCjKmVLfMup4aV8Q7VHgsmkxLaTt
    aliyun:
      regionId: regionId
      accessKeyId: accessKeyId
      secret: secret
    aliyunSms:
      signName: test
      templateCode: text
      templateParam: {}
    aliyunGreen:
      endpointName: cn-beijing
      regionId: cn-beijing
      domain: green.cn-beijing.aliyuncs.com
    aliyunOssEndpoint: http://oss-cn-beijing.aliyuncs.com
    aliyunOssPublicBuckename: renfei #阿里云公共读储存桶
    aliyunOssPrivateBuckename: renfei-private #阿里云私有储存桶，通过颁发签名链接访问
    storageOssPrivateUrl: http://oss.renfei.net/ #如果存储在私有OSS上，鉴权通过后会颁发签名链接，重定向到OSS的地址
    storageType: local #存储到本地还是云 或者 oss
    storagePath: /opt/upload/ #上传存储的路径
    storageUrl: http://127.0.0.1:3306/getFile?uuid= #上传文件以后返回的链接开头，访问文件时有鉴权（适用于私有文件鉴权）
    storagePublicUrl: https://cdn.renfei.net/opt/upload/ #上传文件以后返回的链接开头，公共读访问（适用于公共读文件）
    #############################################################
    # 由于 Github 阻止大文件提交，你可以到下面的网址下载，装载在自己的程序中
    # https://cdn.renfei.net/WinterEE/Data/IPV4_DATA_2020_07.BIN
    ipv4DataPath: data/IPV4_DATA_2020_07.BIN
    # https://cdn.renfei.net/WinterEE/Data/IPV6_DATA_2020_07.BIN
    ipv6DataPath: data/IPV6_DATA_2020_07.BIN
    #############################################################
    oauth2:
      # openssl genrsa -out jwt.pem 2048
      # openssl rsa -in jwt.pem
      privateKey: |
        -----BEGIN RSA PRIVATE KEY-----
        MIIEowIBAAKCAQEAm4irSNcR7CSSfXconxL4g4M4j34wTWdTv93ocMn4VmdB7rCB
        U/BlxXtBUf/cgLIgQhQrAPszSZSmxiEXCOkGPr4aQBQuPgmNIR95Dhbzw/ZN0Bne
        cAt3ZfkkDBHv8kH3kR/jYGTdwrxKeDgXGljNsTRhbjuASxPG/Z6gU1yRPCsgc2r8
        NYnztWGcDWqaobqjG3/yzFmusoAboyV7asIpo4yk378LmonDNwxnOOTb2Peg5Pee
        lwfOwJPbftK1VOOt18zA0cchw6dHUzq9NlB8clps/VdBap9BxU3/0YoFXRIc18ny
        zrWo2BcY2KQqX//AJC3OAfrfDmo+BGK8E0mp8wIDAQABAoIBAENp64P45GXMPEpx
        eYPpfxnRqJRZh6olHSHOl087243n16YTjxrI2fPMxrU6B2Mo0d6SS0lzl/lOmzLJ
        aOiNyA0t7MbVeG2fSjKPJ7M5s5K+kV+fttAtyCTE5iDtLWl9ukaG4dEIJy6e2lBd
        T3Y2A4HJSGm1FJh2DAwl0ywOtUy0X6ki9DgXVAaCGDuoU25Rhun64dh802DZbEEJ
        LdorIyeJ0ovCZyNvhlZRYkAOPy3k88smYl2jE/AbZ7pCKz/XggDcjNsERm2llaa3
        pNTAZQUlHu0BQrCn6J9BxtMPyduiyrE+JYqTwnYhWQ5QRe/2J8O3t0eIK9TfUQpJ
        DrZf00ECgYEAy/sLX8UCmERwMuaQSwoM0BHTZIc0iAsgiXbVOLua9I3Tu/mXOVdH
        TikjdoWLqM62bA9dN/oqzHDwvqCy6zwamjFVSmJUejf5v+52Qj64leOmDX/RC4ne
        L08N1nP/Y4X24Y/5zq18qvVlhOMDdydzayJFrGhkQKhJg58pRUIdenECgYEAwzLC
        Awr3LeUlHa+d2O6siJVmljTc8lT+qX4TvqTDH8rAC/EyKMNaTjaX6mWosZZ7qYXv
        EMxvQzTEzUHRXrCGlhbX8xiBlWnvpghF2GJEvP9WaU/+OCr0gItRSLPDuZ6ctzKb
        3QkBEiC8ODyPRKzlA67D23S3KJB067IUV81h9KMCgYBXUqmT3is2NFYz9DBhb3P8
        vyTYLGl4tArBznWJTAcSGoVCO59ZlNuZwlLEMnePVK8To6AsjpQz4UWu1ezCd4CL
        8gKpTV8M01m/qL5HrcInqMU1kjpTzjmn1xf9brsuR/NgrNoseGieZ1+GfAjHwcPP
        YWSiYi5I38JY7pIkbCFigQKBgAnVtty8YrPXRcV3IbbaX6sKC/8pbrBvA926Unha
        iNJDPuXbIzHWleg26/SNZrB76oMiEmeARWLXd8r3s/rXXhCV2g+PfofurHprFEnQ
        ubHkE5B+zUo7L9KCMng9RnFFwpOgYyYB3CHzsEgNFRLauzcySP/3o3rRvHJbqJa7
        7GGNAoGBAKSBn4zq0iNWI2BUBb90icMsHEneiydGtFcEl3/Sz8vmjFZn0sjRbGoY
        gmP9LlQ+o7xRiJ/LTesi5BA6zCGrcdp0aeyJzCRbFc3WqjGeyLbfx1sJVVB6PnvS
        iKvvCOJq6kl3/opO+ybqJ8dzkEyoj8K4+fcX1+U6eW2w+vSpOosG
        -----END RSA PRIVATE KEY-----
      # openssl rsa -in jwt.pem -pubout
      publicKey: |
        -----BEGIN PUBLIC KEY-----
        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAm4irSNcR7CSSfXconxL4
        g4M4j34wTWdTv93ocMn4VmdB7rCBU/BlxXtBUf/cgLIgQhQrAPszSZSmxiEXCOkG
        Pr4aQBQuPgmNIR95Dhbzw/ZN0BnecAt3ZfkkDBHv8kH3kR/jYGTdwrxKeDgXGljN
        sTRhbjuASxPG/Z6gU1yRPCsgc2r8NYnztWGcDWqaobqjG3/yzFmusoAboyV7asIp
        o4yk378LmonDNwxnOOTb2Peg5PeelwfOwJPbftK1VOOt18zA0cchw6dHUzq9NlB8
        clps/VdBap9BxU3/0YoFXRIc18nyzrWo2BcY2KQqX//AJC3OAfrfDmo+BGK8E0mp
        8wIDAQAB
        -----END PUBLIC KEY-----